name: Deploy to Staging
on:
  push:
    branches:
      - 'staging'

jobs:
  preflight:
    name: Preflight Setup
    runs-on: ubuntu-latest
    # Map step output to a job output, We have to map to the step "outputs" so we can reference the data in our first job as well as outside our first job
    outputs:
      install_name: ${{ steps.output_data.outputs.install_name }}
      theme_name: ${{ steps.output_data.outputs.theme_name }}
      site_url: ${{ steps.output_data.outputs.site_url }}
      site_image_url: ${{ steps.output_data.outputs.site_image_url }}
      slack_channel: ${{ steps.output_data.outputs.slack_channel }}
      environment: ${{ steps.output_data.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Map our reusable outputs
      - name: Output Setup
        id: output_data
        run: |
          echo "::set-output name=install_name::workflowstest"
          echo "::set-output name=theme_name::workflow-theme"
          echo "::set-output name=site_url::workflowstest.wpengine.com"
          echo "::set-output name=site_image_url::https://linchpin.com/wp-content/uploads/2020/06/cropped-favicon-linchpin-512x512-1-180x180.png"
          echo "::set-output name=slack_channel::C01B0ANUD2B"
          echo "::set-output name=environment::production"

      # Notify our install that a deployment is beginning (this will also notify slack)
      - name: Create Deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments
          repository: ${{ github.repository }}
          ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
          environment: ${{ steps.output_data.outputs.environment }}
          auto_merge: false
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set Deployment Status to Pending
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: ${{ steps.output_data.outputs.environment }}
          environment_url: ${{ steps.output_data.outputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: pending
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  dependency_setup:
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: 'composer_dependencies'

      - name: Authenticate packagist.linchpin.com
        run: echo '${{ secrets.PACKAGIST_COMPOSER_AUTH_JSON }}' > ./composer_dependencies/auth.json

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/composer-cache #composer@v5 has a custom cache directory
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

      # run composer install
      - name: Composer Install
        uses: php-actions/composer@v5
        with:
          working_dir: ./composer_dependencies

      # Files appear to upload individually, this takes quite some time
      # See if compressing first, then uploading is faster, even though it adds more steps
      - name: Compress Composer Artifact
        id: composer_compression_artifact
        run: |
          tar -zcf ${{ needs.preflight.outputs.install_name }}-composer.tar.gz composer_dependencies

      # Upload single tar instead of multiple files
      - name: Upload Dependencies
        uses: actions/upload-artifact@v2
        with:
          name: composer_dependencies
          path: ${{ needs.preflight.outputs.install_name}}-composer.tar.gz

  theme_setup:
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: build

      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14'
          check-latest: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build Theme
        id: build-theme
        run: |
          cd build/themes/${{ needs.preflight.outputs.theme_name }}
          yarn install
          gulp build:production

      - name: Compress Theme Artifact
        id: compress_theme_artifact
        run: |
          tar -zcf ${{ needs.preflight.outputs.install_name}}-themes.tar.gz --exclude "node_modules" build

      - name: Upload Themes
        uses: actions/upload-artifact@v2
        with:
          name: themes
          path: ${{ needs.preflight.outputs.install_name}}-themes.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: [preflight, dependency_setup, theme_setup]
    steps:
      - name: Set Deployment Status to In Progress
        id: in_progress_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: ${{ steps.output_data.outputs.environment }}
          environment_url: ${{ steps.output_data.outputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Download Composer Dependencies
        uses: actions/download-artifact@v2
        with:
          name: composer_dependencies

      - name: Decompress Composer Artifacts
        id: decompress_composer_artifacts
        run: |
          tar -xzf ${{ needs.preflight.outputs.install_name}}-composer.tar.gz

      - name: Download Themes
        uses: actions/download-artifact@v2
        with:
          name: themes

      - name: Decompress Theme Artifacts
        id: decompress_theme_artifacts
        run: |
          tar -xzf ${{ needs.preflight.outputs.install_name}}-themes.tar.gz

      - name: Generate release folder name
        id: folder
        run: |
          echo ::set-output name=folder::$(date +'%s')

      - name: Create Build From Artifacts
        id: create_build_from_artifacts
        run: |
          cd ${{ github.workspace }}
          rsync -rxc composer_dependencies/. build

      - name: Clean Build Files/Folders
        id: clean_build_ff
        working-directory: build/.deployment
        run : |
          chmod +x cleanup.sh
          sh cleanup.sh;

      - name: Compress the files to be deployed
        id: compression
        run: |
          mv temp_archive ${{ steps.folder.outputs.folder }}
          tar -czf ${{ steps.folder.outputs.folder }}.tar.gz ./${{ steps.folder.outputs.folder }}

      - name: Deploy to server
        id: deploy_to_server
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -zrxc --delete
          path: ./${{ steps.folder.outputs.folder }}.tar.gz
          remote_path: ~/sites/${{ needs.preflight.outputs.install_name }}/_wpeprivate/releases
          remote_host: ${{ needs.preflight.outputs.install_name }}.ssh.wpengine.net
          remote_port: 22
          remote_user: ${{ needs.preflight.outputs.install_name }}
          remote_key: ${{ secrets.PRIVATE_KEY }}

      - name: Execute bash scripts on server
        id: execute_bash
        uses: appleboy/ssh-action@master
        with:
          host: "${{ needs.preflight.outputs.install_name }}.ssh.wpengine.net"
          username: "${{ needs.preflight.outputs.install_name }}"
          key: ${{ secrets.PRIVATE_KEY }}
          port: "22"
          script: |
            mkdir -p ~/sites/${{ needs.preflight.outputs.install_name }}/_wpeprivate/releases;
            cd ~/sites/${{ needs.preflight.outputs.install_name }}/_wpeprivate/releases;
            tar -xf ${{ steps.folder.outputs.folder }}.tar.gz;
            cd ${{ steps.folder.outputs.folder }}/.deployment;
            chmod +x entrypoint.sh;
            sh ./entrypoint.sh;
            rm -rf ~/sites/${{ needs.preflight.outputs.install_name }}/_wpeprivate/releases/${{ steps.folder.outputs.folder }}/.deployment;
            rm -rf ~/sites/${{ needs.preflight.outputs.install_name }}/_wpeprivate/releases/${{ steps.folder.outputs.folder }}.tar.gz

      - name: Dump steps context
        if: failure()
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

      - name: Dump job context
        if: failure()
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"

      - name: Set Deployment Status as Successful
        if: ${{ success() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: ${{ steps.output_data.outputs.environment }}
          environment_url: ${{ steps.output_data.outputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set Deployment Status as Failboat
        if: ${{ failure() }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: ${{ steps.output_data.outputs.environment }}
          environment_url: ${{ steps.output_data.outputs.site_url }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"